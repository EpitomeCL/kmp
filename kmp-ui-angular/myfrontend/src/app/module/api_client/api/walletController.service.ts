/**
 * KMP API
 * KMP 에서 제공하는 API를 확인하고 테스트 해볼 수 있습니다.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jdlee726@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Status } from '../model/status';
import { WalletOptions } from '../model/walletOptions';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class WalletControllerService {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * fetchEncryptedPayload
     * 
     * @param guid guid
     * @param format format
     * @param resend_code resend_code
     * @param api_code api_code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchEncryptedPayloadUsingGET(guid: string, format: string, resend_code: boolean, api_code: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public fetchEncryptedPayloadUsingGET(guid: string, format: string, resend_code: boolean, api_code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public fetchEncryptedPayloadUsingGET(guid: string, format: string, resend_code: boolean, api_code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public fetchEncryptedPayloadUsingGET(guid: string, format: string, resend_code: boolean, api_code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (guid === null || guid === undefined) {
            throw new Error('Required parameter guid was null or undefined when calling fetchEncryptedPayloadUsingGET.');
        }
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling fetchEncryptedPayloadUsingGET.');
        }
        if (resend_code === null || resend_code === undefined) {
            throw new Error('Required parameter resend_code was null or undefined when calling fetchEncryptedPayloadUsingGET.');
        }
        if (api_code === null || api_code === undefined) {
            throw new Error('Required parameter api_code was null or undefined when calling fetchEncryptedPayloadUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (format !== undefined) {
            queryParameters = queryParameters.set('format', <any>format);
        }
        if (resend_code !== undefined) {
            queryParameters = queryParameters.set('resend_code', <any>resend_code);
        }
        if (api_code !== undefined) {
            queryParameters = queryParameters.set('api_code', <any>api_code);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/wallet/${encodeURIComponent(String(guid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getRandomBytes
     * 
     * @param bytes bytes
     * @param format format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRandomBytesUsingGET(bytes: number, format: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getRandomBytesUsingGET(bytes: number, format: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getRandomBytesUsingGET(bytes: number, format: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getRandomBytesUsingGET(bytes: number, format: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (bytes === null || bytes === undefined) {
            throw new Error('Required parameter bytes was null or undefined when calling getRandomBytesUsingGET.');
        }
        if (format === null || format === undefined) {
            throw new Error('Required parameter format was null or undefined when calling getRandomBytesUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (bytes !== undefined) {
            queryParameters = queryParameters.set('bytes', <any>bytes);
        }
        if (format !== undefined) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/randombytes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSessionId
     * 
     * @param guid guid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSessionIdUsingGET(guid: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getSessionIdUsingGET(guid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getSessionIdUsingGET(guid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getSessionIdUsingGET(guid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (guid === null || guid === undefined) {
            throw new Error('Required parameter guid was null or undefined when calling getSessionIdUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/wallet/${encodeURIComponent(String(guid))}?format=json&resend_code=false`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getWalletOptions
     * 
     * @param api_code api_code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWalletOptionsUsingGET(api_code: string, observe?: 'body', reportProgress?: boolean): Observable<WalletOptions>;
    public getWalletOptionsUsingGET(api_code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WalletOptions>>;
    public getWalletOptionsUsingGET(api_code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WalletOptions>>;
    public getWalletOptionsUsingGET(api_code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (api_code === null || api_code === undefined) {
            throw new Error('Required parameter api_code was null or undefined when calling getWalletOptionsUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (api_code !== undefined) {
            queryParameters = queryParameters.set('api_code', <any>api_code);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<WalletOptions>(`${this.basePath}/Resources/wallet-options.json`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * logEvent
     * 
     * @param name name
     * @param api_code api_code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public logEventUsingGET(name: string, api_code: string, observe?: 'body', reportProgress?: boolean): Observable<Status>;
    public logEventUsingGET(name: string, api_code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Status>>;
    public logEventUsingGET(name: string, api_code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Status>>;
    public logEventUsingGET(name: string, api_code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling logEventUsingGET.');
        }
        if (api_code === null || api_code === undefined) {
            throw new Error('Required parameter api_code was null or undefined when calling logEventUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (name !== undefined) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (api_code !== undefined) {
            queryParameters = queryParameters.set('api_code', <any>api_code);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Status>(`${this.basePath}/event`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * pinStore
     * 
     * @param key key
     * @param pin pin
     * @param value value
     * @param method method
     * @param api_code api_code
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pinStoreUsingPOST(key: string, pin: string, value: string, method: string, api_code: string, observe?: 'body', reportProgress?: boolean): Observable<Status>;
    public pinStoreUsingPOST(key: string, pin: string, value: string, method: string, api_code: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Status>>;
    public pinStoreUsingPOST(key: string, pin: string, value: string, method: string, api_code: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Status>>;
    public pinStoreUsingPOST(key: string, pin: string, value: string, method: string, api_code: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling pinStoreUsingPOST.');
        }
        if (pin === null || pin === undefined) {
            throw new Error('Required parameter pin was null or undefined when calling pinStoreUsingPOST.');
        }
        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling pinStoreUsingPOST.');
        }
        if (method === null || method === undefined) {
            throw new Error('Required parameter method was null or undefined when calling pinStoreUsingPOST.');
        }
        if (api_code === null || api_code === undefined) {
            throw new Error('Required parameter api_code was null or undefined when calling pinStoreUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (key !== undefined) {
            queryParameters = queryParameters.set('key', <any>key);
        }
        if (pin !== undefined) {
            queryParameters = queryParameters.set('pin', <any>pin);
        }
        if (value !== undefined) {
            queryParameters = queryParameters.set('value', <any>value);
        }
        if (method !== undefined) {
            queryParameters = queryParameters.set('method', <any>method);
        }
        if (api_code !== undefined) {
            queryParameters = queryParameters.set('api_code', <any>api_code);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Status>(`${this.basePath}/pin-store`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * walletCall
     * 
     * @param method method
     * @param guid guid
     * @param api_code api_code
     * @param sharedKey sharedKey
     * @param payload payload
     * @param length length
     * @param checksum checksum
     * @param active active
     * @param email email
     * @param device device
     * @param old_checksum old_checksum
     * @param format format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public walletCallUsingPOST(method: string, guid: string, api_code: string, sharedKey?: string, payload?: string, length?: number, checksum?: string, active?: string, email?: string, device?: string, old_checksum?: string, format?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public walletCallUsingPOST(method: string, guid: string, api_code: string, sharedKey?: string, payload?: string, length?: number, checksum?: string, active?: string, email?: string, device?: string, old_checksum?: string, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public walletCallUsingPOST(method: string, guid: string, api_code: string, sharedKey?: string, payload?: string, length?: number, checksum?: string, active?: string, email?: string, device?: string, old_checksum?: string, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public walletCallUsingPOST(method: string, guid: string, api_code: string, sharedKey?: string, payload?: string, length?: number, checksum?: string, active?: string, email?: string, device?: string, old_checksum?: string, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (method === null || method === undefined) {
            throw new Error('Required parameter method was null or undefined when calling walletCallUsingPOST.');
        }
        if (guid === null || guid === undefined) {
            throw new Error('Required parameter guid was null or undefined when calling walletCallUsingPOST.');
        }
        if (api_code === null || api_code === undefined) {
            throw new Error('Required parameter api_code was null or undefined when calling walletCallUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (method !== undefined) {
            queryParameters = queryParameters.set('method', <any>method);
        }
        if (guid !== undefined) {
            queryParameters = queryParameters.set('guid', <any>guid);
        }
        if (sharedKey !== undefined) {
            queryParameters = queryParameters.set('sharedKey', <any>sharedKey);
        }
        if (payload !== undefined) {
            queryParameters = queryParameters.set('payload', <any>payload);
        }
        if (length !== undefined) {
            queryParameters = queryParameters.set('length', <any>length);
        }
        if (checksum !== undefined) {
            queryParameters = queryParameters.set('checksum', <any>checksum);
        }
        if (active !== undefined) {
            queryParameters = queryParameters.set('active', <any>active);
        }
        if (email !== undefined) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (device !== undefined) {
            queryParameters = queryParameters.set('device', <any>device);
        }
        if (old_checksum !== undefined) {
            queryParameters = queryParameters.set('old_checksum', <any>old_checksum);
        }
        if (format !== undefined) {
            queryParameters = queryParameters.set('format', <any>format);
        }
        if (api_code !== undefined) {
            queryParameters = queryParameters.set('api_code', <any>api_code);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<string>(`${this.basePath}/wallet`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
